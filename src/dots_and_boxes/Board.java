package dots_and_boxes;

import javafx.util.Pair;

public class Board {
	
	//Members.......
	private int width;
	private int hight;
	//private boolean  state;
	private Dot[][] dots;
	
	// Constructor....
	public Board(int hight,int width) {
		// Initializing Board Dims.....
		this.width = width;
		this.hight = hight;
		// Initializing the Boards dots....
		dots = new Dot[hight][width];
		for(int i=0; i<width; i++) {
			for(int j=0; j<hight; j++) {
				// manipulating corners states....
				if(i == 0 && j == 0) // top left dot
				{
					dots[i][j].valide_Directions.add(new Pair<>("Left",false)); // can't..
					dots[i][j].valide_Directions.add(new Pair<>("Right",true)); // can...
					dots[i][j].valide_Directions.add(new Pair<>("Up",false));  // can't...
					dots[i][j].valide_Directions.add(new Pair<>("Down",true)); // can....
				}
				if(i == hight - 1 && j == 0) // Bottom left dot
				{
					dots[i][j].valide_Directions.add(new Pair<>("Left",false)); // can't..
					dots[i][j].valide_Directions.add(new Pair<>("Right",true)); // can...
					dots[i][j].valide_Directions.add(new Pair<>("Up",true));  // can...
					dots[i][j].valide_Directions.add(new Pair<>("Down",false)); // can't....
				}
				if(i == 0 && j == width - 1) // top right dot
				{
					dots[i][j].valide_Directions.add(new Pair<>("Left",true)); // can..
					dots[i][j].valide_Directions.add(new Pair<>("Right",false)); // can't...
					dots[i][j].valide_Directions.add(new Pair<>("Up",false));  // can't...
					dots[i][j].valide_Directions.add(new Pair<>("Down",true)); // can....
				}
				if(i == hight - 1 && j == width - 1) // bottom right dot
				{
					dots[i][j].valide_Directions.add(new Pair<>("Left",true)); // can..
					dots[i][j].valide_Directions.add(new Pair<>("Right",false)); // can't...
					dots[i][j].valide_Directions.add(new Pair<>("Up",true));  // can...
					dots[i][j].valide_Directions.add(new Pair<>("Down",false)); // can't....
				}
				// manipulating sides states.....
				if(j == 0 && (i != 0 || i != hight - 1)) // left side
				{
					dots[i][j].valide_Directions.add(new Pair<>("Left",false)); // can't..
					dots[i][j].valide_Directions.add(new Pair<>("Right",true)); // can...
					dots[i][j].valide_Directions.add(new Pair<>("Up",true));  // can...
					dots[i][j].valide_Directions.add(new Pair<>("Down",true)); // can....
				}
				if(j == width - 1 && (i != 0 ||i != hight - 1)) // right side
				{
					dots[i][j].valide_Directions.add(new Pair<>("Left",false)); // can't..
					dots[i][j].valide_Directions.add(new Pair<>("Right",true)); // can...
					dots[i][j].valide_Directions.add(new Pair<>("Up",true));  // can...
					dots[i][j].valide_Directions.add(new Pair<>("Down",true)); // can....
				}
				if(i == 0 && (j != 0 || j != width -1)) // up side
				{
					dots[i][j].valide_Directions.add(new Pair<>("Left",true)); // can..
					dots[i][j].valide_Directions.add(new Pair<>("Right",true)); // can...
					dots[i][j].valide_Directions.add(new Pair<>("Up",false));  // can't...
					dots[i][j].valide_Directions.add(new Pair<>("Down",true)); // can....
				}
				if(i == hight - 1 && (j != 0 || j != width -1)) // down side
				{
					dots[i][j].valide_Directions.add(new Pair<>("Left",true)); // can..
					dots[i][j].valide_Directions.add(new Pair<>("Right",true)); // can...
					dots[i][j].valide_Directions.add(new Pair<>("Up",true));  // can...
					dots[i][j].valide_Directions.add(new Pair<>("Down",false)); // can't....
				}
			}
		}
		
	}
	
	//Fields........

}
